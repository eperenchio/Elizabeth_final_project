select(REGION_NAME.x, DATE, long, lat, group, subregion.x, TOTAL_CO2_MED) %>%
pivot_wider(names_from = DATE,
values_from = TOTAL_CO2_MED,
values_fill = list(value="NA"),
values_fn = list)
co2_2020_df<- joined_df %>%
select(REGION_NAME.x, DATE, long, lat, group, subregion.x, TOTAL_CO2_MED)
#new column with color category...
co2_2020_df$percent<- ifelse(co2_2020_df$TOTAL_CO2_MED <=-0.01 & co2_2020_df$TOTAL_CO2_MED > -1, "Less than 1%",
ifelse(co2_2020_df$TOTAL_CO2_MED <=-1 & co2_2020_df$TOTAL_CO2_MED > -2, "1-2%",
ifelse(co2_2020_df$TOTAL_CO2_MED <= -2 & co2_2020_df$TOTAL_CO2_MED > -3, "2-3%",
ifelse(co2_2020_df$TOTAL_CO2_MED <= -3 & co2_2020_df$TOTAL_CO2_MED > -4, "3-4%",
ifelse(co2_2020_df$TOTAL_CO2_MED <= -4 & co2_2020_df$TOTAL_CO2_MED > -5, "4-5%",
ifelse(co2_2020_df$TOTAL_CO2_MED <= -5 & co2_2020_df$TOTAL_CO2_MED > -6, "Above 5%", no = NA))))))
#function for setting the aesthetics of the plot
my_theme<- function (){
theme_bw() +
theme(axis.text = element_blank(),
axis.title = element_blank(),
strip.text = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "right",
panel.border = element_blank(),
strip.background = element_rect(fill = 'white', colour = 'white'))
}
elizabeth_server<- function(input, output){
sliderValues<- reactive({
co2_2020_df(
name = "Date:",
value = input$DATE
)
})
output$map<- renderPlot({
map_subset<- co2_2020_df[co2_2020_df$DATE == input$date, ]
map<- ggplot()+
geom_polygon(data = map_subset, aes(x = long,
y = lat,
group = group,
fill = as.factor(percent)))+
geom_polygon(data = world_df, aes(x = long,
y = lat,
group = group,
color = "grey",
size = 1))+
coord_map(xlim=c(-180,180)) +
labs(
x = NULL,
y = NULL,
title = NULL,
fill= "Percent Change in Global CO2 Levels (Metric Tons))"
)+
my_theme()+
scale_fill_brewer(palette = "Greens", direction = 1)
})
output$table<- renderTable({
filtered_table<- subset(co2_2020_df, co2_2020_df$DATE == input$date)
polished_table<- filtered_table%>%
select(REGION_NAME.x, TOTAL_CO2_MED) %>%
rename(
Date = DATE,
Country = REGION_NAME.x,
Change_in_Emissions = TOTAL_CO2_MED
)
return(polished_table)
})
output$max_country_text<- renderText({
paste("This map shows the change in CO2 emissions on", input$date, ".
Since lockdown dates and restrictions varied from country to country,
my goal was to evaluate which countries had the biggest reduction in CO2
emissions on different dates in 2020. From interacting with this map, one
can tell that CO2 emissions declined globally during late March & most of April,
but emissions eventually rose once countries came out of lockdown.")
})
width = 800
height = 550
return(map)
}
elizabeth_ui = fluidPage(
titlePanel(strong("Change in Carbon Dioxide by Country in 2020")),
sidebarLayout(
sliderInput(inputId = "date",
label = "Date:",
min = as.Date("2020-01-01", "%Y-%m-%d"),
max = as.Date("2020-12-31", "%Y-%m-%d"),
value = as.Date("2020-01-01"),
timeFormat = "%Y-%m-%d",
animate=animationOptions(interval = 500, loop=TRUE)
),
mainPanel(
plotOutput("map", width = 800, height = 550),
textOutput("max_country_text")
)
))
shinyApp(ui = elizabeth_ui, server = elizabeth_server)
View(co2_2020_df)
elizabeth_server<- function(input, output){
sliderValues<- reactive({
co2_2020_df(
name = "Date:",
value = input$DATE
)
})
output$map<- renderPlot({
map_subset<- co2_2020_df[co2_2020_df$DATE == input$date, ]
map<- ggplot()+
geom_polygon(data = map_subset, aes(x = long,
y = lat,
group = group,
fill = as.factor(percent)))+
geom_polygon(data = world_df, aes(x = long,
y = lat,
group = group,
color = "grey",
size = 1))+
coord_map(xlim=c(-180,180)) +
labs(
x = NULL,
y = NULL,
title = NULL,
fill= "Percent Change in Global CO2 Levels (Metric Tons))"
)+
my_theme()+
scale_fill_brewer(palette = "Greens", direction = 1)
})
output$table<- renderTable({
filtered_table<- subset(co2_2020_df, co2_2020_df$DATE == input$date)
polished_table<- filtered_table%>%
select(REGION_NAME.x, TOTAL_CO2_MED) %>%
rename(
Date = DATE,
Country = REGION_NAME.x,
Change_in_Emissions = TOTAL_CO2_MED
)
return(polished_table)
})
output$max_country_text<- renderText({
paste("This map shows the change in CO2 emissions on", input$date, ".
Since lockdown dates and restrictions varied from country to country,
my goal was to evaluate which countries had the biggest reduction in CO2
emissions on different dates in 2020. From interacting with this map, one
can tell that CO2 emissions declined globally during late March & most of April,
but emissions eventually rose once countries came out of lockdown.")
})
width = 800
height = 550
return(map)
}
shinyApp(ui = elizabeth_ui, server = elizabeth_server)
elizabeth_server<- function(input, output){
sliderValues<- reactive({
co2_2020_df(
name = "Date:",
value = input$DATE
)
})
output$map<- renderPlot({
map_subset<- co2_2020_df[co2_2020_df$DATE == input$date, ]
map<- ggplot(data = map_subset)+
geom_polygon(aes(x = long,
y = lat,
group = group,
fill = as.factor(percent)))+
geom_polygon(data = world_df, aes(x = long,
y = lat,
group = group,
color = "grey",
size = 1))+
coord_map(xlim=c(-180,180)) +
labs(
x = NULL,
y = NULL,
title = NULL,
fill= "Percent Change in Global CO2 Levels (Metric Tons))"
)+
my_theme()+
scale_fill_brewer(palette = "Greens", direction = 1)
})
output$table<- renderTable({
filtered_table<- subset(co2_2020_df, co2_2020_df$DATE == input$date)
polished_table<- filtered_table%>%
select(REGION_NAME.x, TOTAL_CO2_MED) %>%
rename(
Date = DATE,
Country = REGION_NAME.x,
Change_in_Emissions = TOTAL_CO2_MED
)
return(polished_table)
})
output$max_country_text<- renderText({
paste("This map shows the change in CO2 emissions on", input$date, ".
Since lockdown dates and restrictions varied from country to country,
my goal was to evaluate which countries had the biggest reduction in CO2
emissions on different dates in 2020. From interacting with this map, one
can tell that CO2 emissions declined globally during late March & most of April,
but emissions eventually rose once countries came out of lockdown.")
})
width = 800
height = 550
return(map)
}
shinyApp(ui = elizabeth_ui, server = elizabeth_server)
elizabeth_server<- function(input, output){
sliderValues<- reactive({
co2_2020_df(
name = "Date:",
value = input$DATE
)
})
output$map<- renderPlot({
map_subset<- co2_2020_df[co2_2020_df$DATE == input$date, ]
map<- ggplot(data = map_subset)+
geom_polygon(aes(x = long,
y = lat,
group = group,
fill = percent)))+
coord_map(xlim=c(-180,180)) +
labs(
x = NULL,
y = NULL,
title = NULL,
fill= "Percent Change in Global CO2 Levels (Metric Tons))"
)+
my_theme()+
scale_fill_brewer(palette = "Greens", direction = 1)
})
output$table<- renderTable({
filtered_table<- subset(co2_2020_df, co2_2020_df$DATE == input$date)
polished_table<- filtered_table%>%
select(REGION_NAME.x, TOTAL_CO2_MED) %>%
rename(
Date = DATE,
Country = REGION_NAME.x,
Change_in_Emissions = TOTAL_CO2_MED
)
return(polished_table)
})
output$max_country_text<- renderText({
paste("This map shows the change in CO2 emissions on", input$date, ".
Since lockdown dates and restrictions varied from country to country,
my goal was to evaluate which countries had the biggest reduction in CO2
emissions on different dates in 2020. From interacting with this map, one
can tell that CO2 emissions declined globally during late March & most of April,
but emissions eventually rose once countries came out of lockdown.")
})
width = 800
height = 550
return(map)
}
elizabeth_server<- function(input, output){
sliderValues<- reactive({
co2_2020_df(
name = "Date:",
value = input$DATE
)
})
output$map<- renderPlot({
map_subset<- co2_2020_df[co2_2020_df$DATE == input$date, ]
map<- ggplot(data = map_subset)+
geom_polygon(aes(x = long,
y = lat,
group = group,
fill = percent))+
coord_map(xlim=c(-180,180)) +
labs(
x = NULL,
y = NULL,
title = NULL,
fill= "Percent Change in Global CO2 Levels (Metric Tons))"
)+
my_theme()+
scale_fill_brewer(palette = "Greens", direction = 1)
})
output$table<- renderTable({
filtered_table<- subset(co2_2020_df, co2_2020_df$DATE == input$date)
polished_table<- filtered_table%>%
select(REGION_NAME.x, TOTAL_CO2_MED) %>%
rename(
Date = DATE,
Country = REGION_NAME.x,
Change_in_Emissions = TOTAL_CO2_MED
)
return(polished_table)
})
output$max_country_text<- renderText({
paste("This map shows the change in CO2 emissions on", input$date, ".
Since lockdown dates and restrictions varied from country to country,
my goal was to evaluate which countries had the biggest reduction in CO2
emissions on different dates in 2020. From interacting with this map, one
can tell that CO2 emissions declined globally during late March & most of April,
but emissions eventually rose once countries came out of lockdown.")
})
width = 800
height = 550
return(map)
}
shinyApp(ui = elizabeth_ui, server = elizabeth_server)
elizabeth_server<- function(input, output){
sliderValues<- reactive({
co2_2020_df(
name = "Date:",
value = input$DATE
)
})
output$map<- renderPlot({
map_subset<- co2_2020_df[co2_2020_df$DATE == input$date, ]
map<- ggplot(data = map_subset, aes(x = long,
y = lat,
group = group,
color = "grey",
size = 1))+
geom_polygon(aes(fill = percent))+
coord_map(xlim=c(-180,180)) +
labs(
x = NULL,
y = NULL,
title = NULL,
fill= "Percent Change in Global CO2 Levels (Metric Tons))"
)+
my_theme()+
scale_fill_brewer(palette = "Greens", direction = 1)
})
output$table<- renderTable({
filtered_table<- subset(co2_2020_df, co2_2020_df$DATE == input$date)
polished_table<- filtered_table%>%
select(REGION_NAME.x, TOTAL_CO2_MED) %>%
rename(
Date = DATE,
Country = REGION_NAME.x,
Change_in_Emissions = TOTAL_CO2_MED
)
return(polished_table)
})
output$max_country_text<- renderText({
paste("This map shows the change in CO2 emissions on", input$date, ".
Since lockdown dates and restrictions varied from country to country,
my goal was to evaluate which countries had the biggest reduction in CO2
emissions on different dates in 2020. From interacting with this map, one
can tell that CO2 emissions declined globally during late March & most of April,
but emissions eventually rose once countries came out of lockdown.")
})
width = 800
height = 550
return(map)
}
shinyApp(ui = elizabeth_ui, server = elizabeth_server)
#library(ggmap)
#library(shiny)
#library(sf)
#library(dplyr)
#library(RColorBrewer)
huge_df<- read.csv("data/combined_countries/combined.csv")
world_df<- map_data("world")
#rename world column to prepare for merging
world_df<- fortify(world_df)
world_df<- world_df %>%
rename(REGION_NAME = region)
#change formatting of huge_df to prepare for joining
huge_df$DATE<- as.Date(huge_df$DATE, format = "%m/%d/%y")
huge_df = huge_df[-1,]
new_huge_df<- full_join(world_df, huge_df, by ="REGION_NAME", copy=TRUE)
#make sure all lat & long are there
joined_df<- new_huge_df %>%
full_join(world_df, by=c("long", "lat", "group"))
#create a smaller df with the columns needed for map
co2_2020_df<- joined_df %>%
select(REGION_NAME.x, DATE, long, lat, group, subregion.x, TOTAL_CO2_MED)
co2_2020_df$TOTAL_CO2_MED = as.numeric(as.character(co2_2020_df$TOTAL_CO2_MED))
co2_2020_df<-fortify(co2_2020_df)
#new column with color category...
co2_2020_df$percent<- ifelse(co2_2020_df$TOTAL_CO2_MED <=-0.01 & co2_2020_df$TOTAL_CO2_MED > -1, "Less than 1%",
ifelse(co2_2020_df$TOTAL_CO2_MED <=-1 & co2_2020_df$TOTAL_CO2_MED > -2, "1-2%",
ifelse(co2_2020_df$TOTAL_CO2_MED <= -2 & co2_2020_df$TOTAL_CO2_MED > -3, "2-3%",
ifelse(co2_2020_df$TOTAL_CO2_MED <= -3 & co2_2020_df$TOTAL_CO2_MED > -4, "3-4%",
ifelse(co2_2020_df$TOTAL_CO2_MED <= -4 & co2_2020_df$TOTAL_CO2_MED > -5, "4-5%",
ifelse(co2_2020_df$TOTAL_CO2_MED <= -5 & co2_2020_df$TOTAL_CO2_MED > -6, "Above 5%", no = NA))))))
#function for setting the aesthetics of the plot
my_theme<- function (){
theme_bw() +
theme(axis.text = element_blank(),
axis.title = element_blank(),
strip.text = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "right",
panel.border = element_blank(),
strip.background = element_rect(fill = 'white', colour = 'white'))
}
elizabeth_server<- function(input, output){
sliderValues<- reactive({
joined_df(
name = "Date:",
value = input$DATE
)
})
output$map<- renderPlot({
map_subset<- co2_2020_df[co2_2020_df$DATE == input$date, ]
map<- ggplot()+
geom_polygon(data = map_subset, aes(x = long,
y = lat,
group = group,
fill = as.factor(percent)))+
geom_polygon(data = world_df, aes(x = long,
y = lat,
group = group,
color = "grey",
size = 1))+
coord_map(xlim=c(-180,180)) +
labs(
x = NULL,
y = NULL,
title = NULL,
fill= "Percent Change in Global CO2 Levels (Metric Tons))"
)+
my_theme()+
scale_fill_brewer(palette = "Greens", direction = 1)
})
output$table<- renderTable({
filtered_table<- subset(co2_2020_df, co2_2020_df$DATE == input$date)
polished_table<- filtered_table%>%
select(REGION_NAME.x, TOTAL_CO2_MED) %>%
rename(
Date = DATE,
Country = REGION_NAME.x,
Change_in_Emissions = TOTAL_CO2_MED
)
return(polished_table)
})
output$max_country_text<- renderText({
paste("This map shows the change in CO2 emissions on", input$date, ".
Since lockdown dates and restrictions varied from country to country,
my goal was to evaluate which countries had the biggest reduction in CO2
emissions on different dates in 2020. From interacting with this map, one
can tell that CO2 emissions declined globally during late March & most of April,
but emissions eventually rose once countries came out of lockdown.")
})
width = 800
height = 550
return(map)
}
summary(co2_2020_df$TOTAL_CO2_MED, na.rm=TRUE)
elizabeth_ui = fluidPage(
titlePanel(strong("Change in Carbon Dioxide by Country in 2020")),
sidebarLayout(
sliderInput(inputId = "date",
label = "Date:",
min = as.Date("2020-01-01", "%Y-%m-%d"),
max = as.Date("2020-12-31", "%Y-%m-%d"),
value = as.Date("2020-01-01"),
timeFormat = "%Y-%m-%d",
animate=animationOptions(interval = 500, loop=TRUE)
),
mainPanel(
plotOutput("map", width = 800, height = 550),
textOutput("max_country_text")
)
))
shinyApp(ui = elizabeth_ui, server = elizabeth_server)
#create a smaller df with the columns needed for map
co2_2020_df_wide<- joined_df %>%
select(REGION_NAME.x, DATE, long, lat, group, subregion.x, TOTAL_CO2_MED, percent) %>%
pivot_wider(names_from = DATE,
values_from = percent,
values_fill = list(value="NA"),
values_fn = list)
#new column with color category...
co2_2020_df$percent<- ifelse(co2_2020_df$TOTAL_CO2_MED <=-0.01 & co2_2020_df$TOTAL_CO2_MED > -1, "Less than 1%",
ifelse(co2_2020_df$TOTAL_CO2_MED <=-1 & co2_2020_df$TOTAL_CO2_MED > -2, "1-2%",
ifelse(co2_2020_df$TOTAL_CO2_MED <= -2 & co2_2020_df$TOTAL_CO2_MED > -3, "2-3%",
ifelse(co2_2020_df$TOTAL_CO2_MED <= -3 & co2_2020_df$TOTAL_CO2_MED > -4, "3-4%",
ifelse(co2_2020_df$TOTAL_CO2_MED <= -4 & co2_2020_df$TOTAL_CO2_MED > -5, "4-5%",
ifelse(co2_2020_df$TOTAL_CO2_MED <= -5 & co2_2020_df$TOTAL_CO2_MED > -6, "Above 5%", no = NA))))))
#create a smaller df with the columns needed for map
co2_2020_df_wide<- joined_df %>%
select(REGION_NAME.x, DATE, long, lat, group, subregion.x, TOTAL_CO2_MED, percent) %>%
pivot_wider(names_from = DATE,
values_from = percent,
values_fill = list(value="NA"),
values_fn = list)
#create a smaller df with the columns needed for map
co2_2020_df_wide<- co2_2020_df%>%
select(REGION_NAME.x, DATE, long, lat, group, subregion.x, TOTAL_CO2_MED, percent) %>%
pivot_wider(names_from = DATE,
values_from = percent,
values_fill = list(value="NA"),
values_fn = list)
#create a smaller df with the columns needed for map
co2_2020_df_wide<- co2_2020_df%>%
select(REGION_NAME.x, DATE, long, lat, group, TOTAL_CO2_MED, percent) %>%
pivot_wider(names_from = DATE,
values_from = percent,
values_fill = list(value="NA"),
values_fn = list)
#create a smaller df with the columns needed for map
co2_2020_df_wide<- co2_2020_df%>%
select(REGION_NAME.x, DATE, long, lat, group, TOTAL_CO2_MED, percent) %>%
pivot_wider(names_from = DATE,
values_from = percent,
values_fill = list(value="NA"),
values_fn = list)
#create a smaller df with the columns needed for map
co2_2020_df_wide<- co2_2020_df%>%
select(REGION_NAME.x, DATE, long, lat, group, TOTAL_CO2_MED, percent) %>%
pivot_wider(names_from = DATE,
values_from = percent,
values_fill = list(value="NA"),
values_fn = list)
usethis::edit_r_environ()
install.packages("usethis")
usethis::edit_r_environ()
